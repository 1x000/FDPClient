/*
 * FDPClient Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge by LiquidBounce.
 * https://github.com/SkidderMC/FDPClient/
 */
package net.ccbluex.liquidbounce.features.module.modules.misc

import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.utils.ClientUtils
import net.ccbluex.liquidbounce.features.value.BoolValue
import net.ccbluex.liquidbounce.features.value.IntegerValue
import net.minecraft.network.play.server.*

@ModuleInfo(name = "AntiExploit", category = ModuleCategory.MISC, array = false)
class AntiExploit : Module() {
    init {
        state = true
    }

    private val notifyValue = BoolValue("Notify", false)
    private val guardianValue = BoolValue("LessGuardian", true)
    private val maxArrowSpawn = IntegerValue("MaxArrowPerSecond", 100, 1, 1000)

    private var tick = 0
    private var arrowMax = 0
    private var guardianEffect = false

    private fun sendMessage(s: String, force: Boolean = false) {
        if (notifyValue.get() || force)ClientUtils.displayChatMessage("§7[§a§lAntiExploit§7]§6 $s")
    }

    override fun onDisable() {
        sendMessage("We highly recommend you to keep this module, AntiExploit enabled.", true)
    }

    @EventTarget
    fun onPacket(event: PacketEvent) {
        val packet = event.packet

        if (mc.thePlayer != null && mc.theWorld != null && packet is S0FPacketSpawnMob && mc.theWorld.loadedEntityList.size > 500) {
            event.cancelEvent()
            sendMessage("Cancelled S0FPacketSpawnMob")
        }

        if (packet is S08PacketPlayerPosLook) {
            if (packet.getYaw() > 380f || packet.getYaw() < -380f || packet.getPitch() > 90f || packet.getPitch() < -90f || packet.getX() > 2.0E7 || packet.getY() > 2.0E7 || packet.getZ() > 2.0E7 || packet.getX() < -2.0E7 || packet.getY() < -2.0E7 || packet.getZ() < -2.0E7) {
                event.cancelEvent()
                sendMessage("Cancelled Illegal S08 Packet")
            }
        }

        if (packet is S2APacketParticles) {
            if (packet.getParticleCount() > 1024) {
                event.cancelEvent()
                sendMessage("Cancelled S2APacketParticles")
            }
        }

        if (packet is S27PacketExplosion) {
            if (packet.getX() > 10000 || packet.getY() > 10000 || packet.getZ() > 10000) {
                event.cancelEvent()
                sendMessage("Cancelled Illegal S27 Packet")
            }
        }

        // idk how to convert it (commit d8c981c)
        /*if (e.getPacket() instanceof S27PacketExplosion) {
                        s9[0] = (S27PacketExplosion)e.getPacket();
                        if (s9[0].func_149144_d() > 10000.0f || s9[0].func_149147_e() > 10000.0f || s9[0].func_149149_c() > 10000.0f || s9[0].getX() > 10000.0 || s9[0].getY() > 10000.0 || s9[0].getZ() > 10000.0) {
                            e.setCancelled(true);
                        }
                    }*/

        if (packet is S2BPacketChangeGameState) {
            when(packet.gameState) {
                5 -> {
                    if(!mc.isDemo) {
                        event.cancelEvent()
                        sendMessage("Illegal Demo GUI.")
                    }
                }
                10 -> {
                    if(guardianValue.get()) {
                        if (!guardianEffect) {
                            guardianEffect = true
                        } else {
                            event.cancelEvent()
                            sendMessage("Limited Guardian Effect.")
                        }
                    }

                }
            }
        }

        if (packet is S0EPacketSpawnObject && packet.type == 60) {
            if (arrowMax++ > maxArrowSpawn.get()) {
                event.cancelEvent()
                sendMessage("Reached max arrow spawn per second.")
            }
        }
    }

    @EventTarget
    fun onUpdate(event: UpdateEvent) {
        if (tick++ >= 20) {
            tick = 0
            arrowMax = 0
            guardianEffect = false
        }
    }

}
