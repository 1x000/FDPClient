package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.other

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.MotionEvent
import net.ccbluex.liquidbounce.event.WorldEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.features.value.BoolValue
import net.ccbluex.liquidbounce.features.value.IntegerValue
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.minecraft.network.Packet
import net.minecraft.network.play.INetHandlerPlayServer
import java.util.concurrent.LinkedBlockingQueue
import net.minecraft.network.play.client.*
import java.util.*
import kotlin.math.abs
import net.minecraft.util.BlockPos
import net.minecraft.util.EnumFacing
import kotlin.random.Random


class VulcanDisabler : DisablerMode("Vulcan") {
    private val omnisprint = BoolValue ("Omnisprint", true)
    private val strafe = BoolValue ("Airstrafe", true)
    private val combat = BoolValue ("Reach", true)

    private val packetBuffer = LinkedBlockingQueue<Packet<INetHandlerPlayServer>>()
    
    override fun onEnable() {
        packetBuffer.clear()
    }
    
    override fun onMotion(event: MotionEvent) {
        if (!event.isPre()) {
            return
        }
        if (omnisprint.get()) {
            mc.netHandler.addToSendQueue(C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SPRINTING))
            mc.netHandler.addToSendQueue(C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING))
        }
      
        if (strafe.get() && mc.thePlayer.ticksExisted % 5 == 0) 
            mc.netHandler.addToSendQueue(C07PacketPlayerDigging(C07PacketPlayerDigging.Action.STOP_DESTROY_BLOCK, BlockPos(-1,-1,-1), EnumFacing.UP))

    }
    
    override fun onWorld(event: WorldEvent) {
        packetBuffer.clear()
    }
    
    override fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if (mc.thePlayer.ticksExisted % 2 == 0 && combat.get()) {
            if (packet is C08PacketPlayerBlockPlacement || packet is C03PacketPlayer ||
                packet is C0APacketAnimation ||
                packet is C0BPacketEntityAction || packet is C02PacketUseEntity) {
                event.cancelEvent()
                packetBuffer.add(packet as Packet<INetHandlerPlayServer>)
            }
        } else {
            while (!packetBuffer.isEmpty()) {
                mc.netHandler.addToSendQueue(packetBuffer.take())
            }
        }        
    }
}
