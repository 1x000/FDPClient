package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.other

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.event.WorldEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.features.value.BoolValue
import net.ccbluex.liquidbounce.features.value.IntegerValue
import net.ccbluex.liquidbounce.script.api.global.Chat.alert
import net.ccbluex.liquidbounce.utils.BlinkUtils
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import net.minecraft.network.play.client.C0BPacketEntityAction
import net.minecraft.network.play.client.C07PacketPlayerDigging
import net.minecraft.util.BlockPos
import net.minecraft.util.EnumFacing
import java.util.*
import kotlin.random.Random

class VulcanDisabler : DisablerMode("Vulcan") {
    private val combatValue = BoolValue("${valuePrefix}Combat", true)
    
    private val compDecValue = BoolValue("${valuePrefix}CombatDecrease", true).displayable { combatValue.get() } 
    private val statDecValue = IntegerValue("${valuePrefix}CombatDecreaseDelay", 1500, 500, 2500).displayable { compDecValue.get() && combatValue.get() }
    private val dynamicValue = BoolValue("${valuePrefix}CombatDynamicDelay", true).displayable { combatValue.get() } 
    private val decDelayMinValue = IntegerValue("${valuePrefix}CombatMinDelay", 4500, 2000, 8000).displayable { dynamicValue.get() && combatValue.get() }
    private val decDelayMaxValue = IntegerValue("${valuePrefix}CombatMaxDelay", 5500, 2000, 8000).displayable { dynamicValue.get() && combatValue.get() }
    private val minBuffValue = IntegerValue("${valuePrefix}CombatMinBuff", 5, 0, 12).displayable { combatValue.get() } 
    private val noC0BValue = BoolValue("${valuePrefix}CombatNoC0BPacket", false).displayable { combatValue.get() } 
    private var currentTrans = 0
    
    private val strafeValue = BoolValue("${valuePrefix}Strafe", true)
    
    private val avoidPhaseBpValue = BoolValue("${valuePrefix}StrafeNoBadPacket", true).displayable {strafeValue.get()} //Avoid flags when phasing / clipping
    private val delayValue = IntegerValue("${valuePrefix}StrafePacketDelay", 6, 3, 10).displayable {strafeValue.get()} //保留备用，可能能够绕过别的反作弊
    private var c03Counter = 0
    
    private val sprintValue = BoolValue("${valuePrefix}OmniSprint", true)
    
    private var currentTrans = 0
    
    //已经死了一半的Disabler，稍微复活一下。已经无法（只靠这个Disabler）绕过的Bypass：Vanilla Velocity / None Rotation
    
    private var currentDelay = 5000
    private var currentBuffer = 4
    private var currentDec = -1
    private val lagTimer = MSTimer()
    private val decTimer = MSTimer()
    private var runReset = false
    override fun onEnable() {
        if (combatValue.get()) {
            updateLagTime()
        }
        if (strafeValue.get()) {
            c03Counter = -15
        }
    }

    override fun onDisable() {
        if (combatValue.get()) {
            updateLagTime()
            BlinkUtils.releasePacket(packetType = "C0FPacketConfirmTransaction")
            BlinkUtils.setBlinkState(packetTransaction = false)
        }
    }

    override fun onUpdate(event: UpdateEvent) {
        if (combatValue.get()) {
            if (runReset) {
                runReset = false
                mc.netHandler.addToSendQueue(C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING))
            }
            if (lagTimer.hasTimePassed(currentDelay.toLong()) && BlinkUtils.bufferSize(packetType = "C0FPacketConfirmTransaction") > currentBuffer) {
                updateLagTime()
                BlinkUtils.releasePacket(packetType = "C0FPacketConfirmTransaction", minBuff = currentBuffer)
                disabler.debugMessage("C0F-PingTickCounter RELEASE")
            }
            if (decTimer.hasTimePassed(currentDec.toLong()) && currentDec > 0) {
                BlinkUtils.releasePacket(packetType = "C0FPacketConfirmTransaction", amount = 1)
                disabler.debugMessage("C0F-PingTickCounter DECREASE")
                decTimer.reset()
            }
        }
        if (sprintValue.get()) {
            mc.netHandler.addToSendQueue(C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SPRINTING))
            mc.netHandler.addToSendQueue(C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING))
        }
    }
    override fun onWorld(event: WorldEvent) {
        if (combatValue.get()) { 
            BlinkUtils.clearPacket(packetType = "C0FPacketConfirmTransaction")
            currentTrans = 0
            updateLagTime()
            runReset = noC0BValue.get()
        }
        if (strafeValue.get()) {
            c03Counter = -15
        }
    }
    override fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if (combatValue.get()) {
            if (packet is C0BPacketEntityAction && noC0BValue.get()) {
                event.cancelEvent()
                disabler.debugMessage("C0B-EntityAction CANCELLED")
            }
            if (packet is C0FPacketConfirmTransaction && disabler.state) {
                BlinkUtils.setBlinkState(packetTransaction = false)
                val transUID = (packet.uid).toInt()
                if (transUID >= -25767 && transUID <= -24769) {
                    BlinkUtils.setBlinkState(packetTransaction = true)
                    disabler.debugMessage("C0F-PingTickCounter IN ${BlinkUtils.bufferSize(packetType = "C0FPacketConfirmTransaction")}")
                }else if (transUID == -30000){
                    BlinkUtils.setBlinkState(packetTransaction = true)
                    disabler.debugMessage("C0F-OnSpawn IN ${BlinkUtils.bufferSize(packetType = "C0FPacketConfirmTransaction")}")
                }
            }
        }
        if (strafeValue.get()) {
            if (packet is C03PacketPlayer) {
                c03Counter++
                if (packet.isMoving) {
                    if (c03Counter >= delayValue.get()) {
                        mc.netHandler.addToSendQueue(
                            C07PacketPlayerDigging(C07PacketPlayerDigging.Action.STOP_DESTROY_BLOCK,
                                if (avoidPhaseBpValue.get()) { BlockPos.ORIGIN } else { BlockPos(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ) }, EnumFacing.DOWN)
                        )
                        c03Counter = 0
                    } else if (c03Counter == delayValue.get() - 2) {
                        mc.netHandler.addToSendQueue(
                            C07PacketPlayerDigging(C07PacketPlayerDigging.Action.START_DESTROY_BLOCK,
                                BlockPos.ORIGIN, EnumFacing.DOWN)
                        )
                    }
                }
            }
        }
    }
    private fun updateLagTime() {
        decTimer.reset()
        lagTimer.reset()
        currentDelay = if (dynamicValue.get()) Random.nextInt(decDelayMinValue.get(), decDelayMaxValue.get()) else 5000
        currentDec = if (compDecValue.get()) statDecValue.get() else -1
        currentBuffer = minBuffValue.get()
    }
}
