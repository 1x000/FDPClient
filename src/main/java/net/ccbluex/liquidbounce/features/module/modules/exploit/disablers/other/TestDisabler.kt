package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.other

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.event.WorldEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.ccbluex.liquidbounce.features.value.IntegerValue
import net.minecraft.network.Packet
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.*
import net.minecraft.network.play.server.S12PacketEntityVelocity
import java.util.*

class TestDisabler : DisablerMode("Test") {
    private val lagDurationValue = IntegerValue("${valuePrefix}Duration", 1000, 500, 3000)
    private val packetBuffer = LinkedList<Packet<INetHandlerPlayServer>>()
    private var receivedS12 = false
    private val fakeLagDuration = MSTimer()
    override fun onEnable() {
        packetBuffer.clear()
    }
    override fun onDisable() {
        for (packet in packetBuffer) {
            PacketUtils.sendPacketNoEvent(packet)
        }
        packetBuffer.clear()
    }

    override fun onWorld(event: WorldEvent) {
        fakeLagDuration.reset()
        packetBuffer.clear()
    }

    override fun onUpdate(event: UpdateEvent) {
        if (fakeLagDuration.hasTimePassed(lagDurationValue.get().toLong()) && receivedS12) {
            receivedS12 = false
            for (packet in packetBuffer) {
                PacketUtils.sendPacketNoEvent(packet)
            }
            disabler.debugMessage("Release C0F Buffer")
            packetBuffer.clear()
        }
    }
    override fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if (packet is S12PacketEntityVelocity) {
            if (mc.thePlayer == null || (mc.theWorld?.getEntityByID(packet.entityID) ?: return) != mc.thePlayer) {
                return
            }
            fakeLagDuration.reset()
            disabler.debugMessage("S12 Received")
            receivedS12 = true
        }
        if (packet is C0FPacketConfirmTransaction && receivedS12) {
            event.cancelEvent()
            disabler.debugMessage("C0F Buffer IN ${packetBuffer.size}")
            packetBuffer.add(packet as Packet<INetHandlerPlayServer>)
        }
    }
}
