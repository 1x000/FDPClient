package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.other

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.features.value.BoolValue
import net.ccbluex.liquidbounce.utils.MovementUtils
import net.minecraft.network.play.client.C00PacketKeepAlive
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import net.minecraft.network.play.client.C0APacketAnimation
import net.minecraft.network.play.client.C0BPacketEntityAction
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition
import net.minecraft.network.play.client.C03PacketPlayer.C05PacketPlayerLook
import net.minecraft.network.play.client.C03PacketPlayer.C06PacketPlayerPosLook

class BasicDisabler : DisablerMode("Basic") {
    private val cancelC00Value = BoolValue("${valuePrefix}CancelC00", true)
    private val cancelC0FValue = BoolValue("${valuePrefix}CancelC0F", true)
    private val cancelC0AValue = BoolValue("${valuePrefix}CancelC0A", true)
    private val cancelC0BValue = BoolValue("${valuePrefix}CancelC0B", true)
    private val cancelC03Value = BoolValue("${valuePrefix}CancelC03", true)
    private val c03NoMoveValue = BoolValue("NoMove", false, { cancelC03Value.get() })
    override fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if (packet is C0FPacketConfirmTransaction && cancelC0FValue.get()) {
            event.cancelEvent()
            disabler.debugMessage("Cancel C0F")
        }
        if (packet is C00PacketKeepAlive && cancelC00Value.get()) {
            event.cancelEvent()
            disabler.debugMessage("Cancel C00")
        }
        if (packet is C0APacketAnimation && cancelC0AValue.get()) {
            event.cancelEvent()
            disabler.debugMessage("Cancel C0A")
        }
        if (packet is C0BPacketEntityAction && cancelC0BValue.get()) {
            event.cancelEvent()
            disabler.debugMessage("Cancel C0B")
        }
        if (packet is C03PacketPlayer && !(packet is C03PacketPlayer.C05PacketPlayerLook || packet is C03PacketPlayer.C06PacketPlayerPosLook || packet is C03PacketPlayer.C04PacketPlayerPosition) && cancelC03Value.get()) {
            if (c03NoMoveValue.get() && MovementUtils.isMoving())
                return
            event.cancelEvent()
            disabler.debugMessage("Cancel C03")
        }
    }
}
