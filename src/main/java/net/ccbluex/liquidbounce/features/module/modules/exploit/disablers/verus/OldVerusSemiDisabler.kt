/*
 * FDPClient Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge by LiquidBounce.
 * https://github.com/SkidderMC/FDPClient/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.verus

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.value.BoolValue
import net.minecraft.init.Items
import net.minecraft.network.Packet
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.*
import net.minecraft.network.play.server.S08PacketPlayerPosLook

import java.util.*

class OldVerusSemiDisabler  : DisablerMode("OldVerus-Semi2") {

    private val verusLobbyValue = BoolValue("LobbyCheck", false)
    private val queueBus = LinkedList<Packet<INetHandlerPlayServer>>()

    private fun shouldRun(): Boolean =
        mc.thePlayer != null && mc.thePlayer.inventory != null && (!verusLobbyValue.get() || !mc.thePlayer.inventory.hasItem(
            Items.compass
        )) && mc.thePlayer.ticksExisted > 5

    private fun isInventory(action: Short): Boolean = action in 1..99

    override fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if (!shouldRun()) {
            queueBus.clear()
            return
        }

        if (packet is C0BPacketEntityAction) {
            event.cancelEvent()
            disabler.debugMessage("cancel action")
        }

        if (packet is S08PacketPlayerPosLook) {
            if (mc.thePlayer.getDistance(packet.x, packet.y, packet.z) < 8) {
                PacketUtils.sendPacketNoEvent(
                    C03PacketPlayer.C06PacketPlayerPosLook(
                        packet.x,
                        packet.y,
                        packet.z,
                        packet.yaw,
                        packet.pitch,
                        false
                    )
                )
                event.cancelEvent()
                disabler.debugMessage("silent flag")
            }
        }

        if (packet is C00PacketKeepAlive || (packet is C0FPacketConfirmTransaction && !isInventory(packet.uid))) {
            queueBus.add(packet as Packet<INetHandlerPlayServer>)
            event.cancelEvent()

            disabler.debugMessage("c0f or c00, ${queueBus.size}")

            if (queueBus.size > 300) {
                PacketUtils.sendPacketNoEvent(queueBus.poll())
                disabler.debugMessage("poll")
            }
        }

        if (packet is C03PacketPlayer) {
            if (mc.thePlayer.ticksExisted % 20 == 0) {
                PacketUtils.sendPacketNoEvent(C0CPacketInput(0.98f, 0.98f, false, false))
                disabler.debugMessage("c18 and c0c")
            }

            if (mc.thePlayer.ticksExisted % 45 == 0) {
                packet.y = -0.015625
                packet.onGround = false
                packet.isMoving = false
                disabler.debugMessage("flag packet")
            }
        }
    }

}