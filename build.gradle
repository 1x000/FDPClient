/*
 * FDPClient Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge by LiquidBounce.
 * https://github.com/SkidderMC/FDPClient/
 */
plugins {
    id 'java'
    id 'idea'
    id 'org.jetbrains.kotlin.jvm'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'com.gorylenko.gradle-git-properties' version '2.4.1'
    id 'net.minecraftforge.gradle.forge'
    id 'org.spongepowered.mixin'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url = 'https://maven.minecraftforge.net/' }
    maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    maven { url = 'https://jitpack.io/' }
    maven { url = 'https://repo.viaversion.com/' }
}

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

sourceCompatibility = targetCompatibility = '1.8'

compileJava {
    options.encoding = 'UTF-8'
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

minecraft {
    version = '1.8.9-11.15.1.2318-1.8.9'
    runDir = 'run'
    mappings = 'stable_22'
    makeObfSourceJar = false
    clientJvmArgs = ["-Dfml.coreMods.load=net.ccbluex.liquidbounce.injection.forge.TransformerLoader", "-Xmx2048m", "-Xms2048m", "-Ddev-mode"]
}

configurations {
    include
    implementation.extendsFrom(include)

    external
    compile.extendsFrom(external)

    runtimeOnly.canBeResolved = true
}

def viaLibs = [
        "com.viaversion:viaversion:${project.viaversion_version}",
        "com.viaversion:viabackwards:${project.viabackwards_version}",
        "com.viaversion:viarewind-universal:${project.viarewind_version}",
        "net.raphimc:ViaLoader:${project.vialoader_version}",
        "org.yaml:snakeyaml:${project.snake_yml_version}",
        "org.slf4j:slf4j-api:${project.slf4j_version}"
]

dependencies {
    // Implementation dependencies
    implementation 'org.projectlombok:lombok:1.18.30'
    include("org.spongepowered:mixin:0.7.11-SNAPSHOT") {
        transitive = false
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'commons-io', module: 'commons-io'
        exclude group: 'com.google.code.gson', module: 'gson'
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-core'
    }

    viaLibs.each { via ->
        include(via)
    }

    include('com.github.half-cambodian-hacker-man:Koffee:d8cee73') {
        exclude module: 'asm-commons'
        exclude module: 'asm-tree'
        exclude module: 'asm'
    }

    annotationProcessor("org.spongepowered:mixin:0.7.11-SNAPSHOT")

    // Other dependencies
    include "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    include("me.friwi:jcefmaven:$jcef_version") {
        exclude module: 'commons-compress'
        exclude module: 'jogl-all'
        exclude module: 'gluegen-rt'
    }
    include("com.jagrosh:DiscordIPC:0.4")
    include("com.github.SkidderMC:elixir-2:1.2.4") {
        exclude module: 'kotlin-stdlib'
        exclude module: 'authlib'
    }
    include("com.github.zh79325:open-gif:1.0.4") {
        exclude module: 'slf4j-api'
        exclude module: 'logback-core'
        exclude module: 'logback-classic'
        exclude module: 'junit'
    }
    include("com.github.UnlegitMC:Astar3d:bec2291cf2") // pathfinding
    include 'com.jhlabs:filters:2.0.235-1'
    include fileTree(dir: "libs", include: ["*.jar"])
}

shadowJar {
    archiveClassifier.set("")
    configurations = [project.configurations.include]
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // Exclusions
    exclude 'native-binaries/**'
    exclude 'LICENSE.txt'
    exclude 'META-INF/maven/**'
    exclude 'META-INF/versions/**'
    exclude 'org/apache/**'
    exclude 'org/junit/**'
}

processResources {
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    filesMatching('mcmod.info') {
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    rename '(.+_at.cfg)', 'META-INF/\$1'
}

task moveResources {
    doLast {
        ant.move file: "${buildDir}/resources/main", todir: "${buildDir}/classes/java"
    }
}

moveResources.dependsOn(processResources)
classes.dependsOn(moveResources)

jar {
    manifest {
        attributes(
                "FMLCorePlugin": "net.ccbluex.liquidbounce.injection.forge.TransformerLoader",
                "FMLCorePluginContainsFMLMod": true,
                "ForceLoadAsMod": true,
                "MixinConfigs": "mixins.fdpclient.json",
                "ModSide": "CLIENT",
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": "0",
                "FMLAT": "fdpclient_at.cfg"
        )
    }

    enabled = false
}

mixin {
    disableRefMapWarning = true
    defaultObfuscationEnv = 'searge'
    add sourceSets.main, "mixins.fdpclient.refmap.json"
}

reobf {
    shadowJar {
        mappingType = "SEARGE"
    }
}

tasks.reobfJar.dependsOn(shadowJar)

configurations {
    compileClasspath {
        attributes.attribute(Attribute.of("org.gradle.jvm.environment", String), "standard-jvm")
    }
    include {
        attributes.attribute(Attribute.of("org.gradle.jvm.environment", String), "standard-jvm")
    }
}
